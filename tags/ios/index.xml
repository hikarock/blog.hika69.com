<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on hikarock blog</title>
    <link>https://blog.hika69.com/tags/ios/</link>
    <description>Recent content in Ios on hikarock blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Tue, 10 Feb 2015 19:55:15 +0000</lastBuildDate>
    <atom:link href="https://blog.hika69.com/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>IB_DESIGNABLE を使おう</title>
      <link>https://blog.hika69.com/blog/2015/02/10/ibdesignable/</link>
      <pubDate>Tue, 10 Feb 2015 19:55:15 +0000</pubDate>
      
      <guid>https://blog.hika69.com/blog/2015/02/10/ibdesignable/</guid>
      <description>

&lt;p&gt;Xcode6 から使える &lt;code&gt;IB_DESIGNABLE&lt;/code&gt; と &lt;code&gt;IBInspectable&lt;/code&gt; が非常に便利なんだけど情報が少ない。&lt;/p&gt;

&lt;p&gt;ので、基本とかは置いといて、とりあえず知ってることを雑多にまとめてみる。&lt;/p&gt;

&lt;h3 id=&#34;有用なリンク:37abba03a2e327338726ad5c5fd40ef4&#34;&gt;有用なリンク&lt;/h3&gt;

&lt;p&gt;とりあえずここらへんを眺めると良いとおもう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/ios/recipes/xcode_help-IB_objects_media/chapters/CreatingaLiveViewofaCustomObject.html&#34;&gt;Creating a Custom View That Renders in Interface Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nshipster.com/ibinspectable-ibdesignable/&#34;&gt;IBInspectable / IBDesignable - NSHipster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.weheartswift.com/make-awesome-ui-components-ios-8-using-swift-xcode-6/&#34;&gt;How to make awesome UI components in iOS 8 using Swift and XCode 6 - IBDesignable and IBInspectable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ib-designable-な-view-は-uiview-もしくは-nsview-を継承して作る:37abba03a2e327338726ad5c5fd40ef4&#34;&gt;&lt;code&gt;IB_DESIGNABLE&lt;/code&gt; な View は &lt;code&gt;UIView&lt;/code&gt; もしくは &lt;code&gt;NSView&lt;/code&gt; を継承して作る&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hika69.com/images/post/ib-designable-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UITableViewCell&lt;/code&gt; とか継承して &lt;code&gt;IB_DESIGNABLE&lt;/code&gt; を設定しても IB 上では動かない。Preview でも同様に反映されなかった。残念。&lt;/p&gt;

&lt;p&gt;ただし &lt;code&gt;IBInspectable&lt;/code&gt; は使える。コードを書かないで値を設定できるだけでも便利なので、使い道はあると思う。
心の目で見るんだ。&lt;/p&gt;

&lt;h3 id=&#34;初期値を設定する:37abba03a2e327338726ad5c5fd40ef4&#34;&gt;初期値を設定する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;initWithCoder&lt;/code&gt; で設定する。ただし、ここで設定した初期値が IB 上のフォームで選択状態になってたりはしない。心の目で見るんだ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (id)initWithCoder:(NSCoder *)aDecoder {
  self = [super initWithCoder:aDecoder];
  if (self != nil) {
    self.cornerRadius = 8;
    self.borderWidth  = 0.5;
  }
  return self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ibinspectable-で使える型:37abba03a2e327338726ad5c5fd40ef4&#34;&gt;&lt;code&gt;IBInspectable&lt;/code&gt; で使える型&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;enum&lt;/code&gt; が使えると便利そうだと思ったけどだめだった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hika69.com/images/post/ib-designable-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上でも紹介している、&lt;a href=&#34;https://www.weheartswift.com/make-awesome-ui-components-ios-8-using-swift-xcode-6/&#34;&gt;このエントリ&lt;/a&gt;
にある型を試した。他にも使える型があるのかもしれない。&lt;/p&gt;

&lt;h3 id=&#34;要素の消し忘れに注意:37abba03a2e327338726ad5c5fd40ef4&#34;&gt;要素の消し忘れに注意&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hika69.com/images/post/ib-designable-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IBInspectable&lt;/code&gt; で設定した値は &lt;code&gt;Identity Inspector&lt;/code&gt; 上の &lt;code&gt;User Defined Runtime Attributes&lt;/code&gt; 上に保存される。
プロパティを設定後に、プロパティ名を変更したり削除したりすると、ここに迷子の要素が残ってしまう。&lt;/p&gt;

&lt;p&gt;迷子の要素がある画面を iOS7.1 で開いたら何もログを出さずに落ちたが、要素を削除したら問題なく起動した(iOS8 では問題なかった)。やっかいだ。&lt;/p&gt;

&lt;h3 id=&#34;ibinspectable-な-view-を継承する:37abba03a2e327338726ad5c5fd40ef4&#34;&gt;&lt;code&gt;IBInspectable&lt;/code&gt; な View を継承する&lt;/h3&gt;

&lt;p&gt;継承した &lt;code&gt;IBInspectable&lt;/code&gt; な View のプロパティが両方 IB 上に表示される。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.hika69.com/images/post/ib-designable-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;2つの View でそれぞれ設定した値がストーリーボード上に反映されている。&lt;/p&gt;

&lt;p&gt;(&lt;code&gt;UIView&lt;/code&gt; を継承している &lt;code&gt;UITableViewCell&lt;/code&gt; の場合は &lt;code&gt;IB_DESIGNABLE&lt;/code&gt; が動かなかったので、このへんの仕組みがよくわからない感じ)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOSアプリ開発のGit運用</title>
      <link>https://blog.hika69.com/blog/2014/12/16/git-flow/</link>
      <pubDate>Tue, 16 Dec 2014 09:37:50 +0000</pubDate>
      
      <guid>https://blog.hika69.com/blog/2014/12/16/git-flow/</guid>
      <description>

&lt;p&gt;iOSアプリはリリースサイクルが長くなりがちなので、&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow&lt;/a&gt;ではなく、&lt;a href=&#34;http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html&#34;&gt;git-flow&lt;/a&gt;を参考にしたフローを使っている。&lt;/p&gt;

&lt;p&gt;仕事もプライベートもこのフローで今のところ問題はない感じ (複数人開発含む)。&lt;/p&gt;

&lt;h3 id=&#34;各ブランチの役割:0550120cb8935579b8c8c5fd080ebba7&#34;&gt;各ブランチの役割&lt;/h3&gt;

&lt;p&gt;基本的に普通の &lt;code&gt;git-flow&lt;/code&gt; と変わらないけれど、AppStore がからむとこを中心に説明します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;master

&lt;ul&gt;
&lt;li&gt;現在AppStoreで配布中の最新バージョンと常にイコール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;release

&lt;ul&gt;
&lt;li&gt;リリース準備ができたら&lt;code&gt;develop&lt;/code&gt;から分岐する。AppStoreでリリース申請通過後に&lt;strong&gt;リリース完了した時点&lt;/strong&gt;で&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;develop&lt;/code&gt;にマージする。リリース前に&lt;code&gt;release&lt;/code&gt;上で変更があった場合は適宜&lt;code&gt;develop&lt;/code&gt; &lt;code&gt;feature&lt;/code&gt;にマージする。&lt;/li&gt;
&lt;li&gt;リリース後にタグを打つのを忘れずに。&lt;code&gt;git tag -a v1.0.1 -m &#39;my version 1.0.1&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;develop

&lt;ul&gt;
&lt;li&gt;開発ブランチ。次期バージョンの要件を満たしたら&lt;code&gt;release&lt;/code&gt;ブランチを作成する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;feature

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;develop&lt;/code&gt;ブランチから作成して、作業完了したら&lt;code&gt;develop&lt;/code&gt;にマージする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;hotfix

&lt;ul&gt;
&lt;li&gt;AppStoreで配布中のバージョンで障害が発生した場合に&lt;code&gt;master&lt;/code&gt;から作成する。AppStoreでリリース申請通過後に&lt;strong&gt;リリース完了した時点&lt;/strong&gt;で&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;develop&lt;/code&gt;に(必要であれば&lt;code&gt;release&lt;/code&gt; &lt;code&gt;feature&lt;/code&gt;にも)マージする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git-flow-コマンドについて:0550120cb8935579b8c8c5fd080ebba7&#34;&gt;git-flow コマンドについて&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git-flow&lt;/code&gt;コマンドは上記のようなフローでの開発を補助するgitのサブコマンドです。
各ブランチの作成やマージが便利になるコマンドが用意されているけど、プルリクエストやGithub上でのマージは考慮されていない。&lt;/p&gt;

&lt;p&gt;上記フローを実践するために必ずしも&lt;code&gt;git-flow&lt;/code&gt;コマンドを使う必要はない。僕は普通のgitコマンドでブランチ切ったり、Github上のプルリクエストからマージしたりしてる。&lt;/p&gt;

&lt;h3 id=&#34;何がうれしいか:0550120cb8935579b8c8c5fd080ebba7&#34;&gt;何がうれしいか&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;iTunes Connectで申請中に、次のバージョンの機能を&lt;code&gt;develop&lt;/code&gt;にさくさくマージできる

&lt;ul&gt;
&lt;li&gt;GitHub Flow だと&lt;code&gt;master&lt;/code&gt;とトピックブランチだけなのでシンプルで良いんだけど、iOSアプリはリリース申請期間が長いし、その間も開発はしたいので無理が出てくる&lt;/li&gt;
&lt;li&gt;日次で&lt;code&gt;develop&lt;/code&gt;と&lt;code&gt;release&lt;/code&gt;ブランチをそれぞれ DeployGate 等に配布する仕組みがあれば検証する人も便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リリース版のアプリで不具合があった時に、常に&lt;code&gt;master&lt;/code&gt;がリリースされたものと同一だと安心感がある。&lt;code&gt;hotfix&lt;/code&gt;で障害対応が可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release&lt;/code&gt;ブランチをプルリクエストしておくと&lt;code&gt;What&#39;s New in this Version&lt;/code&gt;をまとめるときに便利&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>