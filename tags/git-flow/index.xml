<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git Flow on hikarock blog</title>
    <link>https://blog.hika69.com/tags/git-flow/</link>
    <description>Recent content in Git Flow on hikarock blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Tue, 16 Dec 2014 09:37:50 +0000</lastBuildDate>
    <atom:link href="https://blog.hika69.com/tags/git-flow/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iOSアプリ開発のGit運用</title>
      <link>https://blog.hika69.com/blog/2014/12/16/git-flow/</link>
      <pubDate>Tue, 16 Dec 2014 09:37:50 +0000</pubDate>
      
      <guid>https://blog.hika69.com/blog/2014/12/16/git-flow/</guid>
      <description>

&lt;p&gt;iOSアプリはリリースサイクルが長くなりがちなので、&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow&lt;/a&gt;ではなく、&lt;a href=&#34;http://danielkummer.github.io/git-flow-cheatsheet/index.ja_JP.html&#34;&gt;git-flow&lt;/a&gt;を参考にしたフローを使っている。&lt;/p&gt;

&lt;p&gt;仕事もプライベートもこのフローで今のところ問題はない感じ (複数人開発含む)。&lt;/p&gt;

&lt;h3 id=&#34;各ブランチの役割:0550120cb8935579b8c8c5fd080ebba7&#34;&gt;各ブランチの役割&lt;/h3&gt;

&lt;p&gt;基本的に普通の &lt;code&gt;git-flow&lt;/code&gt; と変わらないけれど、AppStore がからむとこを中心に説明します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;master

&lt;ul&gt;
&lt;li&gt;現在AppStoreで配布中の最新バージョンと常にイコール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;release

&lt;ul&gt;
&lt;li&gt;リリース準備ができたら&lt;code&gt;develop&lt;/code&gt;から分岐する。AppStoreでリリース申請通過後に&lt;strong&gt;リリース完了した時点&lt;/strong&gt;で&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;develop&lt;/code&gt;にマージする。リリース前に&lt;code&gt;release&lt;/code&gt;上で変更があった場合は適宜&lt;code&gt;develop&lt;/code&gt; &lt;code&gt;feature&lt;/code&gt;にマージする。&lt;/li&gt;
&lt;li&gt;リリース後にタグを打つのを忘れずに。&lt;code&gt;git tag -a v1.0.1 -m &#39;my version 1.0.1&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;develop

&lt;ul&gt;
&lt;li&gt;開発ブランチ。次期バージョンの要件を満たしたら&lt;code&gt;release&lt;/code&gt;ブランチを作成する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;feature

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;develop&lt;/code&gt;ブランチから作成して、作業完了したら&lt;code&gt;develop&lt;/code&gt;にマージする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;hotfix

&lt;ul&gt;
&lt;li&gt;AppStoreで配布中のバージョンで障害が発生した場合に&lt;code&gt;master&lt;/code&gt;から作成する。AppStoreでリリース申請通過後に&lt;strong&gt;リリース完了した時点&lt;/strong&gt;で&lt;code&gt;master&lt;/code&gt;と&lt;code&gt;develop&lt;/code&gt;に(必要であれば&lt;code&gt;release&lt;/code&gt; &lt;code&gt;feature&lt;/code&gt;にも)マージする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;git-flow-コマンドについて:0550120cb8935579b8c8c5fd080ebba7&#34;&gt;git-flow コマンドについて&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git-flow&lt;/code&gt;コマンドは上記のようなフローでの開発を補助するgitのサブコマンドです。
各ブランチの作成やマージが便利になるコマンドが用意されているけど、プルリクエストやGithub上でのマージは考慮されていない。&lt;/p&gt;

&lt;p&gt;上記フローを実践するために必ずしも&lt;code&gt;git-flow&lt;/code&gt;コマンドを使う必要はない。僕は普通のgitコマンドでブランチ切ったり、Github上のプルリクエストからマージしたりしてる。&lt;/p&gt;

&lt;h3 id=&#34;何がうれしいか:0550120cb8935579b8c8c5fd080ebba7&#34;&gt;何がうれしいか&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;iTunes Connectで申請中に、次のバージョンの機能を&lt;code&gt;develop&lt;/code&gt;にさくさくマージできる

&lt;ul&gt;
&lt;li&gt;GitHub Flow だと&lt;code&gt;master&lt;/code&gt;とトピックブランチだけなのでシンプルで良いんだけど、iOSアプリはリリース申請期間が長いし、その間も開発はしたいので無理が出てくる&lt;/li&gt;
&lt;li&gt;日次で&lt;code&gt;develop&lt;/code&gt;と&lt;code&gt;release&lt;/code&gt;ブランチをそれぞれ DeployGate 等に配布する仕組みがあれば検証する人も便利&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リリース版のアプリで不具合があった時に、常に&lt;code&gt;master&lt;/code&gt;がリリースされたものと同一だと安心感がある。&lt;code&gt;hotfix&lt;/code&gt;で障害対応が可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;release&lt;/code&gt;ブランチをプルリクエストしておくと&lt;code&gt;What&#39;s New in this Version&lt;/code&gt;をまとめるときに便利&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>